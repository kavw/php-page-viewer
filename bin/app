#!/bin/bash
set -peu

__kavw_run__copy()
{
    src="$1"
    dst="$2"

    if [ ! -f "$dst" ]; then
        printf "%s -> %s\n" "$src" "$dst"
        cp "$src" "$dst"
    fi
}

__kavw_run__setup()
{
    local cnt=0
    local proj_dir="$1"

    for i in "$proj_dir"/dc/example*; do
        # shellcheck disable=SC2001
        target=$(echo "$i" | sed 's/example//')
        res=$(__kavw_run__copy "$i" "$target")
        if [ "$res" !=  "" ]; then
            cnt=$((cnt+1));
        fi
    done

}

__kavw_run__get_dc_env_file()
{
    echo "$1/dc/.env"
}

__kavw_run__get_flag_dir()
{
    # $1 - proj_dir
    echo "$proj_dir/var/flags"
}

__kavw_run__get_flag_file()
{
    # $1 - proj_dir
    # $2 - name
    local dir=
    dir=$(__kavw_run__get_flag_dir "$1")
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
    fi

    echo "$dir/$2"
}

__kavw_run__get_flag_default_val()
{
    case "$1" in
    env) echo "prod";;
      *) echo ""    ;;
    esac
}

__kavw_run__get_flag()
{
    # $1 - proj_dir
    # $2 - name
    local file=
    file=$(__kavw_run__get_flag_file "$1" "$2")

    if [ ! -f "$file" ]; then
        local default_val=
        default_val=$(__kavw_run__get_flag_default_val "$2")

        echo "$default_val" > "$file"
        echo "$default_val"

    else
        cat "$file"
    fi
}

__kavw_run__switch_flag()
{
    # $1 - proj_dir
    # $2 - name
    # $3 - value

    local file=
    file=$(__kavw_run__get_flag_file  "$1" "$2")
    echo "$3" > "$file"

    __kavw_run__replace_env_var "$1" APP_"$(echo "$2" | tr '[:lower:]' '[:upper:]')" "$3"

    echo "Current value for \"$2\": $3"
}

__kavw_run__get_env_var()
{
    local file=
    file=$(__kavw_run__get_dc_env_file "$1")
    grep -E "^$2=" "$file" | cut -d= -f2
}

__kavw_run__replace_env_var()
{
    local file=
    file=$(__kavw_run__get_dc_env_file "$1")
    sed -E "s#^$2=.*#$2=$3#" < "$file" > "$file.tmp"
    mv "$file.tmp" "$file"
}

__kavw_run__open_url()
{
    local os=
    local msg="Please, try to open $1"
    os=$(__kavw_run__machine)
    case "$os" in
        Linux) xdg-open "$1" 2> /dev/null || printf "\n%s\n\n" "$msg" ;;
        Mac)   open "$1"     2> /dev/null || printf "\n%s\n\n" "$msg" ;;
        *)     printf "\n%s\n\n" "$msg" ;;
    esac
}

__kavw_run__test_port()
{
    local port="$1"
    local os=
    os=$(__kavw_run__machine)
    if [ "$os" = "Mac" ]; then
        local res=
        res=$(nc -z -w1 localhost "$port" 2> /dev/null || echo "0")
        if [ "$res" = "0" ]; then
          echo "0"
        else
          echo "1"
        fi
    else
        tcp=$(timeout 1 bash -c "</dev/tcp/localhost/$port" 2> /dev/null || echo "1")
        udp=$(timeout 1 bash -c "</dev/tcp/localhost/$port" 2> /dev/null || echo "1")

        if [ "$tcp" = "1" ] && [ "$udp" = "1" ]; then
            echo "1"
        else
            echo "0"
        fi
    fi
}

__kavw_run__choose_default_port()
{
    local default_port="$2"
    while :; do

        local port_busy=
        port_busy=$(__kavw_run__test_port "$default_port")

        if [ "$port_busy" = "0" ]; then
            break
        else
            default_port=$((default_port+1))
            if [ "$default_port" -gt 65535 ]; then
                printf "Can't choose free port\n" 1>&2
                exit 1
            fi
        fi
    done
    echo "$default_port"
}

__kavw_run__choose_port_interactively()
{
    local default_port=
    default_port=$(__kavw_run__choose_default_port "$1" "$2")
    while :; do
        printf "Please, choose a port for the environment variable %s (%s):" "$1" "$default_port"
        read -r port
        if [ "$port" = "" ]; then
            port="$default_port"
        fi

        err="It should be a positive integer between 1 and 65535"
        case "$port" in
            ''|*[!0-9]*) echo "$err" ;;
            *)
                if [ "$port" -gt 0 ] && [ "$port" -lt 65535 ]; then

                    local port_busy=
                    port_busy=$(__kavw_run__test_port "$default_port")

                    if [ "$port_busy" = "0" ]; then
                        break
                    else
                        echo "Port $port is busy"
                    fi
                else
                    echo "$err"
                fi
            ;;
        esac
    done

    echo "$port"
}

__kavw_run__machine()
{
    local res=
    local machine=
    res="$(uname -s)"
    case "${res}" in
        Linux*)   machine=Linux;;
        Darwin*)  machine=Mac;;
        CYGWIN*)  machine=Cygwin;;
        MINGW*)   machine=MinGw;;
        MSYS_NT*) machine=Git;;
        *)        machine="UNKNOWN: ${res}"
    esac
    echo "${machine}"
}

## cmd handlers

__kavw_run__flag()
{
    # $1 - proj_dir
    # $2 - name
    # $3 - value - optional
    if [ "$#" = 1 ]; then
        local dir=
        dir=$(__kavw_run__get_flag_dir "$1")
        for file in "$dir"/*; do
            if [ -f "$file" ]; then
                local flag=
                flag=$(basename "$file")
                local res=
                res=$(__kavw_run__get_flag "$1" "$flag")
                echo "Current value for \"$flag\": $res"
            fi
        done
        return 0
    fi

    if [ "$#" = 2 ]; then
        local res=
        res=$(__kavw_run__get_flag "$1" "$2")
        echo "Current value for \"$2\": $res"
    else
       __kavw_run__switch_flag "$1" "$2" "$3"
    fi
}

__kavw_run__dc()
{
    local proj_dir="$1"
    shift

    local env_file=
    env_file=$(__kavw_run__get_dc_env_file "$proj_dir")
    local compose_files="-f $proj_dir/dc/dc.yml"

    local arch=
    arch=$(uname -m)
    local arch_file="$proj_dir/dc/dc.$arch.yml"

    if [ -f "$arch_file" ]; then
        compose_files="$compose_files -f $arch_file"
    fi

    local mode=
    mode=$(__kavw_run__get_flag "$proj_dir" env)
    if [ "$mode" != "prod" ]; then
        dev_file="$proj_dir/dc/dc.dev.yml"
        compose_files="$compose_files -f $dev_file"
    fi

    local cmd="docker-compose --env-file $env_file $compose_files $*"
    echo "$cmd"
    eval "$cmd"
}

__kavw_run__default()
{
    local proj_name=
    proj_name=$(__kavw_run__get_env_var "$1" "COMPOSE_PROJECT_NAME")
    echo "Running the app: $proj_name ..."

    __kavw_run__flag "$1" env
    local res=
    res=$(__kavw_run__dc "$1" ps | grep -E "^$proj_name") || res=""
    if [ "$res" != "" ]; then
        echo "The app is already running"
        exit 0
    fi

    local port=
    port=$(__kavw_run__choose_default_port "HTTP_PORT_NGINX_FPM" 22080)
    __kavw_run__replace_env_var "$1" "HTTP_PORT_NGINX_FPM" "$port"
    __kavw_run__dc "$1" build
    __kavw_run__dc "$1" run --rm php-cli composer install
    chmod u+x bin/assets/init
    __kavw_run__dc "$1" run --rm assets ash bin/assets/init
    __kavw_run__dc "$1" up -d
    __kavw_run__open_url "http://localhost:$port"
}

__kavw_run__main()
{
    local proj_dir=
    local script_dir=
    # shellcheck disable=SC1007
    script_dir=$(CDPATH= cd -- "$(dirname -- "$0")" && pwd)
    proj_dir=$(dirname "$script_dir")

    __kavw_run__setup "$proj_dir"

    if [ "$#" -eq 0 ]; then
        __kavw_run__default "$proj_dir"
        exit $?
    fi

    local cmd="$1"
    shift

    case "$cmd" in
        env)
            if [ "$#" = 0 ]; then
                __kavw_run__flag "$proj_dir" env
            else
                __kavw_run__flag "$proj_dir" env "$1"
            fi
        ;;

        dev)  __kavw_run__flag "$proj_dir" env dev  ;;
        prod) __kavw_run__flag "$proj_dir" env prod ;;

        flag) __kavw_run__flag "$proj_dir" "$@" ;;

        help) __kavw_run__dc "$proj_dir" ;;

        cli|sh|shell|php) __kavw_run__dc "$proj_dir" run --rm php-cli ash;;
        assets|node) __kavw_run__dc "$proj_dir" run --rm assets ash;;
        *) __kavw_run__dc  "$proj_dir" "$cmd" "$@" ;;
    esac
    exit $?
}

__kavw_run__main "$@"
